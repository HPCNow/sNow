#!/bin/bash
# Configure the new image for sNow! HPC suite
# Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website : www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs OGRT server, a tool designed to track user processes on a HPC cluster.

prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e /sNow/snow-tools/etc/snow.conf ]]; then
    declare -A CLUSTERS
    source /sNow/snow-tools/etc/snow.conf
else
    error_msg  "The /sNow/snow-tools/etc/snow.conf is not available."
    error_exit "Please use the /sNow/snow-tools/etc/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f /sNow/snow-tools/share/common.sh ]]; then
    source /sNow/snow-tools/share/common.sh
    get_os_distro
    architecture_identification
fi

##############     EVALUATE WHO PROVIDES THE SERVICE (SITE, SNOW or BOTH)     ###############
# Setup New Serivce Client
# get the IP of the server offering this service
SNOW_NEWSERVICE_SERVER=$(gawk '{if($2 ~ /service/){print $4}}' $SNOW_TOOL/etc/domains.conf)
# If the site is offering the server already and sNow! is also deploying the server,
# then we asume that sNow server will act as a proxy or relay server (usefull to avoid DOS of performance degradation)
# Otherwise, we will use the only available service.
if  [[ ! -z "$SNOW_NEWSERVICE_SERVER" && ! -z "$SITE_NEWSERVICE_SERVER" ]]; then 
    NEWSERVICE_SERVER=$SNOW_NEWSERVICE_SERVER
else
    NEWSERVICE_SERVER="${SITE_NEWSERVICE_SERVER:-$SNOW_NEWSERVICE_SERVER}"
fi

##############     EVALUATE IF THE SERVER IS AVAILABLE/EXPECTED OR NOT     ###############
if  [[ ! -z "$NEWSERVICE_SERVER" ]]; then 
    # Install the required packages
    installDebianPackage ${prefix} whatever
    # Check if the configuration file already exists
    if [[ -e /sNow/snow-configspace/system_files/etc/NEWSERVICE.conf ]]; then 
        # Transfer the existing file to the final destination
        cp -p /sNow/snow-configspace/system_files/etc/NEWSERVICE.conf ${prefix}/etc/NEWSERVICE.conf
    else
        OGRT_VERSION=0.5.0
        # install OGRT
        #yum update -y
        cd /usr/local
        wget -q https://github.com/georg-rath/ogrt/releases/download/v${OGRT_VERSION}/ogrt-server-v${OGRT_VERSION}.tar.bz2
        tar -jxvf ogrt-server-v${OGRT_VERSION}.tar.bz2
        rm -f ogrt-server-v${OGRT_VERSION}.tar.bz2
        cd ogrt-server-v${OGRT_VERSION}

        # Setup OGRT
        mv /usr/local/ogrt-server-v${OGRT_VERSION}/ogrt.conf /usr/local/ogrt-server-v${OGRT_VERSION}/ogrt.conf.orig
        cat > /usr/local/ogrt-server-v${OGRT_VERSION}/ogrt.conf << EOF
Address = ""
Port = 7971
MaxReceiveBuffer = 262144
DebugEndpoint = true

[Outputs]

 [Outputs.ElasticSearch]
  Type = "JsonElasticSearch5"
  Params = "http:$HOSTNAME:9200:ogrt"
  Workers = 2
EOF

        # Create OGRT service
        cat > /usr/lib/systemd/system/ogrt.service << EOF
[Unit]
Description=OGRT - a tool designed to track user processes on a HPC cluster
Wants=elasticsearch.service
After=elasticsearch.service

[Service]
Type=simple
WorkingDirectory=/usr/local/ogrt-server-v${OGRT_VERSION}
ExecStart=/usr/local/ogrt-server-v${OGRT_VERSION}/ogrt-server
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartSec=30s
EOF

        # Enable OGRT service
        systemctl enable ogrt
        # Parse the default configuration file provided by the OS distribution or your advanced 
        # configuration template located in etc/config_template.d/NEWSERVICE/NEWSERVICE.conf
        # cp -p etc/config_template.d/NEWSERVICE/NEWSERVICE.conf ${prefix}/etc/NEWSERVICE.conf
        sed -i 's|__NEW_SERVICE_PARAMETER__|$NEW_SERVICE_PARAMETER|g' ${prefix}/etc/NEWSERVICE.conf
        cp -p ${prefix}/etc/NEWSERVICE.conf /sNow/snow-configspace/system_files/etc/NEWSERVICE.conf
        # Execute the required commands inside the deployed system with chroot ${prefix}
        chroot ${prefix} /usr/bin/whatever_command $NEW_VARIABLE
        # Use debconf-set-selections to setup the required parameters during the software installation
        # Learn what parameters are available with debconf-show
        echo "NEWSERVICE-config    NEWSERVICE/ParameterA string $NEW_SERVICE_SERVER" | chroot ${prefix} /usr/bin/debconf-set-selections
    fi
fi
