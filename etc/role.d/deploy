#!/bin/bash
# Configure the new image for sNow! HPC suite
# Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website : www.hpcnow.com/snow
#
prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    . /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e /sNow/snow-tools/etc/snow.conf ]]; then
    source /sNow/snow-tools/etc/snow.conf
else
    error_msg  "The /sNow/snow-tools/etc/snow.conf is not available."
    error_exit "Please use the /sNow/snow-tools/etc/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f /sNow/snow-tools/share/common.sh ]]; then
    source /sNow/snow-tools/share/common.sh
    get_os_distro
    architecture_identification
fi

#  Update APT lists.
chroot ${prefix} /usr/bin/apt-get update
installDebianPackage ${prefix} ipmitool openipmi freeipmi nfs-common

# KickStart (RedHat Based) - Ref : http://www.tecmint.com/multiple-centos-installations-using-kickstart/
# Preseed (Debian Based) - Ref :  https://www.debian-administration.org/article/708/Automating_the_Debian_installer_with_PXE_and_preseeding

# Install System Imager (Cloning System)
REPOFILE=systemimager.org.list
URL=http://download.systemimager.org/sources.list.d/$REPOFILE
cd /etc/apt/sources.list.d/
wget $URL -O ${prefix}/etc/apt/sources.list.d/$REPOFILE
wget http://systemimager.org/pub/brian@thefinleys.com.gpg.key -O ${prefix}/tmp/brian@thefinleys.com.gpg.key
chroot ${prefix} /usr/bin/apt-key add /tmp/brian@thefinleys.com.gpg.key
chroot ${prefix} /usr/bin/apt-get update
installDebianPackage ${prefix} systemimager-server simple-state-manager

# Setup TFTP
echo "$NFS_SERVER:$SNOW_CONF/boot   /srv/tftp   nfs      rw,defaults     0 0 " >> ${prefix}/etc/fstab
mkdir -p ${prefix}/srv/tftp

# Setup DNSMASQ
SNOW_DNS_SERVER=$(gawk '{if($2 ~ /deploy/){print $4}}' $SNOW_TOOL/etc/domains.conf)
installDebianPackage ${prefix} dnsmasq
if [[ ! -f $SNOW_CONF/system_files/etc/dnsmasq.conf ]]; then
    cp -p ${prefix}/etc/dnsmasq.conf ${prefix}/etc/dnsmasq.conf.orig
    last_ip=$(last_ip_in_range ${NET_COMP[2]}/${NET_COMP[4]})
    echo "
interface=$DHCP_NIC
# Gateway
dhcp-option=3,${NET_COMP[1]}
# DNS
dhcp-option=6,$SNOW_DNS_SERVER,$DNS_SERVERS
# Domain Name
dhcp-option=15,$DOMAIN
# 0.0.0.0 Means to reference self for this option
dhcp-range=$DHCP_NIC,${NET_COMP[2]},${last_ip},24h
dhcp-boot=pxelinux.0
addn-hosts=/etc/static_hosts
dhcp-sequential-ip
clear-on-reload
enable-tftp
read-ethers
tftp-root=/srv/tftp
" > ${prefix}/etc/dnsmasq.conf
    cp -p ${prefix}/etc/dnsmasq.conf $SNOW_CONF/system_files/etc/dnsmasq.conf
else
    cp -p $SNOW_CONF/system_files/etc/dnsmasq.conf ${prefix}/etc/dnsmasq.conf
fi

if [[ ! -e $SNOW_CONF/system_files/etc/ethers ]]; then
    touch ${prefix}/etc/ethers
    cp -p ${prefix}/etc/ethers $SNOW_CONF/system_files/etc/ethers
else
    cp -p $SNOW_CONF/system_files/etc/ethers ${prefix}/etc/ethers
fi

cp -p $SNOW_CONF/system_files/etc/static_hosts ${prefix}/etc/static_hosts
cp -p $SNOW_TOOL/etc/config_template.d/dhcp/fishermac ${prefix}/usr/local/bin/

# DNS Client Setup
if [[ -e $SNOW_CONF/system_files/etc/resolv.conf ]]; then 
    echo "search $DOMAIN" > ${prefix}/etc/resolv.conf
    SITE_DNS=$(echo $SITE_DNS_SERVER | tr ',' '\n' | gawk '{print "nameserver "$1}')
    PUBLIC_DNS=$(echo $DNS_SERVERS | tr ',' '\n' | gawk '{print "nameserver "$1}')
    echo "$SITE_DNS" >> ${prefix}/etc/resolv.conf
    echo "$PUBLIC_DNS" >> ${prefix}/etc/resolv.conf
fi

# Install and setup sNow! deploy system
if [[ ! -f $SNOW_CONF/boot/templates/postconfig.sh ]]; then
    if [[ ! -d $SNOW_CONF ]]; then 
        mkdir $SNOW_CONF
    fi
    cp -pr $SNOW_TOOL/etc/config_template.d/boot $SNOW_CONF/
    SNOW_PROXY_SERVER=$(gawk '{if($2 ~ /proxy/){print $4}}' $SNOW_TOOL/etc/domains.conf)
    if  [[ ! -z "$SNOW_PROXY_SERVER" && ! -z "$SITE_PROXY_SERVER" ]]; then 
        PROXY_SERVER=$SNOW_PROXY_SERVER
        PROXY_PORT=8080
    else
        PROXY_SERVER="${SITE_PROXY_SERVER:-$SNOW_PROXY_SERVER}"
        PROXY_PORT="${SITE_PROXY_PORT:-8080}"
    fi
    for tmpl in $(find $SNOW_CONF/boot/templates/ -name "*-*" -type d | sed -e "s|$SNOW_CONF/boot/templates/||g"); do
        for file in $(find $SNOW_CONF/boot/templates/$tmpl -type f); do
            sed -i "s|__DEFAULT_TEMPLATE__|$tmpl|g" $file
            sed -i "s|__LANG__|$LANG|g" $file
            sed -i "s|__KEYMAP__|$KEYMAP|g" $file
            sed -i "s|__TIMEZONE__|$TIMEZONE|g" $file
            sed -i "s|__MASTER_PASSWORD__|$MASTER_PASSWORD|g" $file
            sed -i "s|__NFS_SERVER__|$NFS_SERVER|g" $file
            sed -i "s|__PROXY_SERVER__|$PROXY_SERVER|g" $file
            sed -i "s|__PROXY_PORT__|$PROXY_PORT|g" $file 
        done 
    done
fi

# HPCNow repos
if [[ ! -e $SNOW_CONF/system_files/etc/repos ]]; then
    mkdir -p $SNOW_CONF/system_files/etc/repos
    cp -pr $SNOW_TOOL/etc/config_template.d/repos/* $SNOW_CONF/system_files/etc/repos/
fi

# Download linux kernels to boot OS from PXE defined in $SNOW_TOOL/etc/config_template.d/boot/templates/pxe_kernels.conf
while read line; do 
    download_path=$(echo $line | gawk '{print $2}')
    download_url=$(echo $line | gawk '{print $1}')
    if [[ ! -e ${download_path} ]]; then
        mkdir -p ${download_path}
    fi
    download ${download_url} ${download_path}
done < $SNOW_TOOL/etc/config_template.d/boot/templates/pxe_kernels.conf
