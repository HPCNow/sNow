#!/bin/bash
#
# This file contains recipes to deploy domains using sNow! CLI
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs Gate One, a web based terminal emulator and SSH client
# For more information about this software, visit http://liftoffsoftware.com/Products/GateOne

prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e /sNow/snow-tools/etc/snow.conf ]]; then
    declare -A CLUSTERS
    source /sNow/snow-tools/etc/snow.conf
else
    error_msg  "The /sNow/snow-tools/etc/snow.conf is not available."
    error_exit "Please use the /sNow/snow-tools/etc/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f /sNow/snow-tools/share/common.sh ]]; then
    source /sNow/snow-tools/share/common.sh
    get_os_distro
    architecture_identification
fi

# Setup Gate One
# get the IP of the server offering this service
SNOW_GATEONE_SERVER=$(gawk '{if($2 ~ /gateone/){print $1}}' $SNOW_TOOL/etc/domains.conf)
SNOW_GATEONE_SERVER_IP=$(gawk '{if($2 ~ /gateone/){print $4}}' $SNOW_TOOL/etc/domains.conf)
# If the site is offering the server already and sNow! is also deploying the server,
# then we asume that sNow server will act as a proxy or relay server (usefull to avoid DOS of performance degradation)
# Otherwise, we will use the only available service.
if  [[ ! -z "$SNOW_GATEONE_SERVER" && ! -z "$SITE_GATEONE_SERVER" ]]; then 
    GATEONE_SERVER=$SNOW_GATEONE_SERVER
else
    GATEONE_SERVER="${SITE_GATEONE_SERVER:-$SNOW_GATEONE_SERVER}"
fi

##############     EVALUATE IF THE SERVER IS AVAILABLE/EXPECTED OR NOT     ###############
if  [[ ! -z "$GATEONE_SERVER" ]]; then 
    # Install the required packages
    installDebianPackage ${prefix} python-pip python-imaging python-setuptools python-mutagen python-pam python-dev git telnet openssh-client dtach
    chroot ${prefix} pip install --upgrade futures tornado cssmin slimit psutil
    # Check if the configuration files already exist
    if [[ -e /sNow/snow-configspace/system_files/etc/gateone ]]; then 
        # Transfer the existing configuration files to the final destination
        cp -pr /sNow/snow-configspace/system_files/etc/gateone ${prefix}/etc/gateone
    else
        # Parse the default configuration file provided by the OS distribution or your advanced 
        cat << EOF | chroot ${prefix}
            git clone http://github.com/liftoff/GateOne.git /root/GateOne
            cd /root/GateOne
            python setup.py install
            /usr/local/bin/gateone --configure --log_file_prefix="/var/log/gateone.log"
            # Remove the auto-generated key/certificate so that a new one gets created the first time the domain is started:
            #rm -f /etc/gateone/ssl/key.pem /etc/gateone/ssl/certificate.pem
EOF
        cp -pr ${prefix}/etc/gateone /sNow/snow-configspace/system_files/etc/gateone
    fi
fi
