#!/bin/bash
#
# This file contains recipes to deploy domains using sNow! CLI
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs proxy server for HTTP(S),FTP and other relay services (NTP, mail).
prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e ${SNOW_ETC}/snow.conf ]]; then
    declare -A CLUSTERS
    source ${SNOW_ETC}/snow.conf
else
    error_msg  "The ${SNOW_ETC}/snow.conf is not available."
    error_exit "Please use the ${SNOW_ETC}/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f ${SNOW_ROOT}/share/common.sh ]]; then
    source ${SNOW_ROOT}/share/common.sh
    get_os_distro
    architecture_identification
fi

# Hostname
GUEST_FQDN=$hostname
GUEST_HOSTNAME=$(echo $GUEST_FQDN | awk -F'.' '{print $1}')

# NTP Server Setup
SNOW_NTP_SERVER=$(gawk '{if($2 ~ /proxy/){print $4}}' $SNOW_ROOT/etc/domains.conf)
NTP_SERVER="${SITE_NTP_SERVER:-3.pool.ntp.org}"
if  [[ ! -z "$SNOW_NTP_SERVER" ]]; then
    installDebianPackage ${prefix} ntp
    if [[ -e ${SNOW_SRV}/deploy_files/etc/ntp_server.conf ]]; then
        cp -pr ${SNOW_SRV}/deploy_files/etc/ntp_server.conf ${prefix}/etc/ntp.conf
    else
        cp -p ${SNOW_ETC}/config_template.d/ntp_client/ntp.conf ${SNOW_SRV}/deploy_files/etc/ntp_server.conf
        echo "restrict ${NET_SNOW[3]}0 mask ${NET_SNOW[4]} notrust" >> ${SNOW_SRV}/deploy_files/etc/ntp_server.conf
        sed -i "s|__NTP_SERVER__|$NTP_SERVER|g" ${SNOW_SRV}/deploy_files/etc/ntp_server.conf
        chmod 644 ${SNOW_SRV}/deploy_files/etc/ntp_server.conf
        cp -p ${SNOW_SRV}/deploy_files/etc/ntp_server.conf ${prefix}/etc/ntp.conf
    fi
fi

# Proxy Server Setup
SNOW_PROXY_SERVER=$(gawk '{if($2 ~ /proxy/){print $4}}' $SNOW_ROOT/etc/domains.conf)
SNOW_PROXY_PORT=8080
if  [[ ! -z "$SNOW_PROXY_SERVER" ]]; then
    installDebianPackage ${prefix} squid3
    mkdir -p /var/log/squid3
    chown proxy:proxy /var/log/squid3
    if [[ -e ${SNOW_SRV}/deploy_files/etc/squid3 ]]; then
        cp -pr ${SNOW_SRV}/deploy_files/etc/squid3/* ${prefix}/etc/squid3/
    else
        mkdir -p ${SNOW_SRV}/deploy_files/etc/squid3
        cp -pr ${SNOW_ETC}/config_template.d/squid3/* ${SNOW_SRV}/deploy_files/etc/squid3/
        sed -i "s|__ALLOWED_HOSTS__|${NET_SNOW[3]}0/${NET_SNOW[4]}|g" ${SNOW_SRV}/deploy_files/etc/squid3/*
        sed -i "s|__PROXY_SERVER__|$SNOW_PROXY_SERVER|g" ${SNOW_SRV}/deploy_files/etc/squid3/*
        sed -i "s|__PROXY_PORT__|$SNOW_PROXY_PORT|g" ${SNOW_SRV}/deploy_files/etc/squid3/*
        chmod 644 ${SNOW_SRV}/deploy_files/etc/squid3/*
        cp -p ${SNOW_SRV}/deploy_files/etc/squid3/* ${prefix}/etc/squid3/
    fi
fi

# SMTP SmartHost Setup
SNOW_MAIL_SERVER=$(gawk '{if($2 ~ /proxy/){print $4}}' $SNOW_ROOT/etc/domains.conf)
if  [[ ! -z "$SNOW_MAIL_SERVER" ]]; then
    # The following line fixes a issue with exim installation
    chroot ${prefix} /usr/sbin/addgroup --system Debian-exim --force-badname
    installDebianPackage ${prefix} exim4-daemon-light exim4-config openssl
    if [[ -e ${SNOW_SRV}/deploy_files/etc/exim4 ]]; then
        cp -pr ${SNOW_SRV}/deploy_files/etc/exim4/* ${prefix}/etc/exim4/
    else
        chroot ${prefix} /usr/bin/debconf-set-selections <<CONF
exim4-config    exim4/hide_mailname boolean false
exim4-config    exim4/dc_localdelivery select mbox format in /var/mail/
exim4-config    exim4/dc_relay_nets string ${NET_SNOW[3]}0/${NET_SNOW[4]}
exim4-config    exim4/dc_minimaldns boolean false
exim4-config    exim4/dc_other_hostnames string $DOMAIN
exim4-config    exim4/use_split_config boolean true
exim4-config    exim4/mailname string $GUEST_FQDN
exim4-config    exim4/dc_postmaster string snow
exim4-config    exim4/no_config boolean true
exim4-config    exim4/dc_local_interfaces string 127.0.0.1 ; $SNOW_MAIL_SERVER ; ::1
exim4-config    exim4/dc_eximconfig_configtype select internet site; mail is sent and received directly using SMTP
CONF
        if  [[ ! -z "$SITE_MAIL_SERVER" ]]; then
            echo "exim4-config    exim4/dc_smarthost string $SITE_MAIL_SERVER" | chroot ${prefix} /usr/bin/debconf-set-selections
            echo "exim4-config    exim4/dc_eximconfig_configtype select mail sent by smarthost; received via SMTP or fetchmail" | chroot ${prefix} /usr/bin/debconf-set-selections
        fi
        if  [[ ! -z "$SITE_MAIL_SERVER" && ! -z "$SITE_MAIL_USER" && ! -z "$SITE_MAIL_PASSWORD" ]]; then
            echo "$SITE_MAIL_SERVER:$SITE_MAIL_USER:$SITE_MAIL_PASSWORD" >> ${prefix}/etc/exim4/passwd.client
        fi
        chroot ${prefix} /usr/bin/debconf-show exim4-config
        cp -pr ${prefix}/etc/exim4 ${SNOW_SRV}/deploy_files/etc/
    fi
fi
