#!/bin/bash
#
# This file contains recipes to deploy domains using sNow! CLI
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Template to help sNow! users to develop their own roles quickly.

# Now! roles are shell scripts easy to develop and to understand
# Keep in mind the following tips and tricks which will help you to develop new roles:
# (1) Use enviroment variables defined in snow.conf, and extend them if you need new 
#     variables to work with
# (2) When you generate a new configuration file, remember to copy the file in the 
#     deployed system and also ${SNOW_SRV}/deploy_files. If there is a file 
#     in this path, avoid to overwrite it and used it to setup your new system. i
#     This will help to integrate Continous Integration into your system.
# (3) Place comments inside complex sections of the code in order to help people to understand what you are doing
# (4) Use chroot ${prefix} to run commands inside the new deployed system
# (5) Use installDebianPackage ${prefix} to install packages
# (6) Use variables inside the templates easy to recognise and replace __NAME_OF_VARIABLE__
# (7) Use sed with pipe symbols rather than slash symbols. This will help you to replace unix path.

prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e ${SNOW_ETC}/snow.conf ]]; then
    declare -A CLUSTERS
    source ${SNOW_ETC}/snow.conf
else
    error_msg  "The ${SNOW_ETC}/snow.conf is not available."
    error_exit "Please use the ${SNOW_ETC}/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f ${SNOW_ROOT}/share/common.sh ]]; then
    source ${SNOW_ROOT}/share/common.sh
    get_os_distro
    architecture_identification
fi

##############     EVALUATE WHO PROVIDES THE SERVICE (SITE, SNOW or BOTH)     ###############
# Setup New Serivce Client
# get the IP of the server offering this service
SNOW_NEWSERVICE_SERVER=$(gawk '{if($2 ~ /service/){print $4}}' $SNOW_ROOT/etc/domains.conf)
# If the site is offering the server already and sNow! is also deploying the server,
# then we asume that sNow server will act as a proxy or relay server (usefull to avoid DOS of performance degradation)
# Otherwise, we will use the only available service.
if  [[ ! -z "$SNOW_NEWSERVICE_SERVER" && ! -z "$SITE_NEWSERVICE_SERVER" ]]; then 
    NEWSERVICE_SERVER=$SNOW_NEWSERVICE_SERVER
else
    NEWSERVICE_SERVER="${SITE_NEWSERVICE_SERVER:-$SNOW_NEWSERVICE_SERVER}"
fi

##############     EVALUATE IF THE SERVER IS AVAILABLE/EXPECTED OR NOT     ###############
if  [[ ! -z "$NEWSERVICE_SERVER" ]]; then 
    # Install the required packages
    installDebianPackage ${prefix} whatever
    # Check if the configuration file already exists
    if [[ -e ${SNOW_SRV}/deploy_files/etc/NEWSERVICE.conf ]]; then 
        # Transfer the existing file to the final destination
        cp -p ${SNOW_SRV}/deploy_files/etc/NEWSERVICE.conf ${prefix}/etc/NEWSERVICE.conf
    else
        # Parse the default configuration file provided by the OS distribution or your advanced 
        # configuration template located in etc/config_template.d/NEWSERVICE/NEWSERVICE.conf
        # cp -p etc/config_template.d/NEWSERVICE/NEWSERVICE.conf ${prefix}/etc/NEWSERVICE.conf
        sed -i 's|__NEW_SERVICE_PARAMETER__|$NEW_SERVICE_PARAMETER|g' ${prefix}/etc/NEWSERVICE.conf
        cp -p ${prefix}/etc/NEWSERVICE.conf ${SNOW_SRV}/deploy_files/etc/NEWSERVICE.conf
        # Execute the required commands inside the deployed system with chroot ${prefix}
        chroot ${prefix} /usr/bin/whatever_command $NEW_VARIABLE
        # Use debconf-set-selections to setup the required parameters during the software installation
        # Learn what parameters are available with debconf-show
        echo "NEWSERVICE-config    NEWSERVICE/ParameterA string $NEW_SERVICE_SERVER" | chroot ${prefix} /usr/bin/debconf-set-selections
    fi
fi
