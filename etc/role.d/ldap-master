#!/bin/bash
# Configure the new image for sNow! HPC suite
# Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website : www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs LDAP master server.

# Influences: 
# * https://wiki.debian.org/LDAP/PAM
# * https://help.ubuntu.com/lts/serverguide/openldap-server.html
# * https://weichbrodt.me/dokuwiki/tutorial:ldap:installopenldap
prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e /sNow/snow-tools/etc/snow.conf ]]; then
    declare -A CLUSTERS
    source /sNow/snow-tools/etc/snow.conf
else
    error_msg  "The /sNow/snow-tools/etc/snow.conf is not available."
    error_exit "Please use the /sNow/snow-tools/etc/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f /sNow/snow-tools/share/common.sh ]]; then
    source /sNow/snow-tools/share/common.sh
    get_os_distro
    architecture_identification
fi
set -xv
# LDAP Server Setup
SNOW_LDAP_SERVER=$(gawk '{if($2 ~ /ldap-master|ldap-replica|ldap-slave/){print $4}}' $SNOW_TOOL/etc/domains.conf)
SNOW_LDAP_URI=$(gawk -v proto=$LDAP_PROTO 'BEGIN{i=0}{if($2 ~ /ldap-/){ldap[i]=$4; i++}}END{uri=proto"://"ldap[0]; for (j = 1; j < i; j++){uri=uri" ,"proto"://"ldap[j]}; print uri}' $SNOW_TOOL/etc/domains.conf)
LDAP_PROTO="${SITE_LDAP_PROTO:-ldap}"
SNOW_LDAP_BASE=$(echo "dc=$DOMAIN" | sed 's/\./,dc=/g')
LDAP_BASE="${SITE_LDAP_BASE:-$SNOW_LDAP_BASE}"
LDAP_URI="${SITE_LDAP_URI:-$SNOW_LDAP_URI}"
LDAP_TLS="${SITE_LDAP_TLS:-TRUE}"
LDAP_ADMIN_PASSWORD="${LDAP_ADMIN_PASSWORD:-$MASTER_PASSWORD}"
LDAP_CONFIG_PASSWORD="${LDAP_CONFIG_PASSWORD:-$MASTER_PASSWORD}"
LDAP_ORGANIZATION="${LDAP_ORGANIZATION:-${LDAP_BASE}}"

if  [[ ! -z "$SNOW_LDAP_SERVER" ]]; then 
    installDebianPackage ${prefix} slapd ldap-utils ldapscripts openssl gnutls-bin ssl-cert pwgen
    if [[ -e /sNow/snow-configspace/system_files/etc/ldap/slapd.d ]]; then 
        mv ${prefix}/etc/ldap ${prefix}/etc/ldap.dist
        cp -pr /sNow/snow-configspace/system_files/etc/ldap ${prefix}/etc/ldap
    else
        cp -pr ${prefix}/etc/ldap ${prefix}/etc/ldap.dist
        cp -pr /sNow/snow-tools/etc/config_template.d/ldap_server/* ${prefix}/etc/ldap/
        #echo "ulimit -n 8192" >> ${prefix}/etc/default/slapd
        # Check available options with: debconf-show slapd
        cat <<-EOF | chroot ${prefix} /usr/bin/debconf-set-selections
        slapd slapd/password1 password $LDAP_ADMIN_PASSWORD
        slapd slapd/password2 password $LDAP_ADMIN_PASSWORD
        slapd slapd/allow_ldap_v2 boolean false
        slapd slapd/backend select MDB
        slapd slapd/purge_database boolean false
        slapd shared/organization string $LDAP_ORGANIZATION
        slapd slapd/no_configuration boolean false
        slapd slapd/domain string $DOMAIN
        slapd slapd/move_old_database boolean true
EOF
        chroot ${prefix} /usr/sbin/dpkg-reconfigure -f noninteractive slapd >/dev/null 2>&1
        killall slapd
        sleep 5

        # LDAP BASE
        sed -i "s|^#BASE.*|BASE ${SNOW_LDAP_BASE}|g" ${prefix}/etc/ldap/ldap.conf

        # ADDITIONAL LDAP SCHEMAS
        if [[ -n "$LDAP_ADDITIONAL_SCHEMAS" ]]; then
            IFS=","; declare -a schemas=($LDAP_ADDITIONAL_SCHEMAS); unset IFS
            for schema in "${schemas[@]}"; do
                chroot ${prefix} /usr/sbin/slapadd -n0 -F /etc/ldap/slapd.d -l "/etc/ldap/schema/${schema}.ldif"
            done
        fi

        # ADDITIONAL LDAP MODULES
        if [[ -n "$LDAP_ADDITIONAL_MODULES" ]]; then
            IFS=","; declare -a modules=($LDAP_ADDITIONAL_MODULES); unset IFS
            for module in "${modules[@]}"; do
                module_file="/etc/ldap/modules/${module}.ldif"
                if [ "$module" == 'ppolicy' ]; then
                    LDAP_PPOLICY_DN_PREFIX="${LDAP_PPOLICY_DN_PREFIX:-cn=default,ou=policies}"
                    sed -i "s/\(olcPPolicyDefault: \)PPOLICY_DN/\1${LDAP_PPOLICY_DN_PREFIX}$dc_string/g" ${prefix}$module_file
                fi
                chroot ${prefix} /usr/sbin/slapadd -n0 -F /etc/ldap/slapd.d -l "$module_file"
            done
        fi

        # Prepopulate LDAP server
        if [[ -d "${prefix}/etc/ldap/prepopulate" ]]; then 
            init_files=${prefix}/etc/ldap/prepopulate/*.ldif
            for file in $init_files; do
                filename=$(basename $file)
                sed -i "s|__LDAP_URI__|$LDAP_URI|g" "$file"
                sed -i "s|__LDAP_BASE__|$LDAP_BASE|g" "$file"
                chroot ${prefix} /usr/sbin/slapadd -F /etc/ldap/slapd.d -l /etc/ldap/prepopulate/$filename
            done
        fi
    fi

    # Enable TLS support
    if [[ -e /sNow/snow-configspace/system_files/etc/ssl/slapd ]]; then 
        mkdir -p ${prefix}/etc/ssl/slapd
        cp -pr /sNow/snow-configspace/system_files/etc/ssl/slapd/* ${prefix}/etc/ssl/slapd
    else
        # Create dir for certificates
        mkdir -p ${prefix}/etc/ssl/slapd
        # Generate a private key for the certificate
        chroot ${prefix} /usr/bin/certtool --generate-privkey > ${prefix}/etc/ssl/slapd/cakey.pem
        # Create ca.info
        echo "cn = $DOMAIN" > ${prefix}/etc/ssl/slapd/ca.info
        echo "ca" >> ${prefix}/etc/ssl/slapd/ca.info
        echo "cert_signing_key" >> ${prefix}/etc/ssl/slapd/ca.info
        # Create CA certificate
        chroot ${prefix} /usr/bin/certtool --generate-self-signed \
            --load-privkey /etc/ssl/slapd/cakey.pem \
            --template /etc/ssl/slapd/ca.info \
            --outfile /etc/ssl/slapd/cacert.pem
        # Generate private key for the server
        chroot ${prefix} /usr/bin/certtool --generate-privkey \
            --bits 2048 \
            --outfile /etc/ssl/slapd/ldaps_slapd_key.pem
        # Create template for server certificate
        echo "organization = $LDAP_ORGANIZATION" > ${prefix}/etc/ssl/slapd/ldaps.info
        echo "cn = $DOMAIN" >> ${prefix}/etc/ssl/slapd/ldaps.info
        echo "tls_www_server" >> ${prefix}/etc/ssl/slapd/ldaps.info
        echo "encryption_key" >> ${prefix}/etc/ssl/slapd/ldaps.info
        echo "signing_key" >> ${prefix}/etc/ssl/slapd/ldaps.info
        echo "expiration_days = 3650" >> ${prefix}/etc/ssl/slapd/ldaps.info
        # Create the certificate
        chroot ${prefix} /usr/bin/certtool --generate-certificate \
            --load-privkey /etc/ssl/slapd/ldaps_slapd_key.pem \
            --load-ca-certificate /etc/ssl/slapd/cacert.pem \
            --load-ca-privkey /etc/ssl/slapd/cakey.pem \
            --template /etc/ssl/slapd/ldaps.info \
            --outfile /etc/ssl/slapd/ldaps_slapd_cert.pem
        # systemctl does not work in chroot env.
        chroot ${prefix} /etc/init.d/slapd start
        # Add standard ACLs to LDAP to allow users to update the password and to authenticate via PAM
        sleep 5
        sed -i "s|__LDAP_BASE__|$LDAP_BASE|g" ${prefix}/etc/ldap/access.ldif
        chroot ${prefix} /usr/bin/ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/ldap/access.ldif
        killall slapd
        sleep 5
        # Add TLS settings to the config
        chroot ${prefix} /etc/init.d/slapd start
        sleep 5
        chroot ${prefix} /usr/bin/ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/ldap/tls.ldif
        sleep 5
        killall slapd
    fi
    # Secure the keys
    chroot ${prefix} /usr/sbin/adduser openldap ssl-cert
    chroot ${prefix} /bin/chown -R openldap:openldap /etc/ldap/slapd.d /var/lib/ldap/ /var/run/slapd/ 
    cp -pr ${prefix}/etc/ldap/slapd.d /sNow/snow-configspace/system_files/etc/ldap/
    chroot ${prefix} /bin/chown root:ssl-cert /etc/ssl/slapd/{cacert,ldaps_slapd_key,ldaps_slapd_cert}.pem
    chroot ${prefix} /bin/chmod 640 /etc/ssl/slapd/{cacert,ldaps_slapd_key,ldaps_slapd_cert}.pem
    # Give apparmor access to cert files - Ubuntu
    #sed -i "/\/usr\/sbin\/slapd mr,/ s/$/\n\n  \/etc\/ssl\/slapd\/ r,\n  \/etc\/ssl\/slapd\/* r,/" /etc/apparmor.d/usr.sbin.slapd
    #service apparmor reload

    # force TLS - seems not to work
    chroot ${prefix} /etc/init.d/slapd start
    chroot ${prefix} /usr/bin/ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/ldap/force_tls.ldif
    killall slapd
    sleep 5
    # Backup existing ldap.config and create new one
    cp -p ${prefix}/etc/ldap/ldap.conf ${prefix}/etc/ldap/ldap.conf.orig
    echo "BASE $LDAP_BASE" > ${prefix}/etc/ldap/ldap.conf
    echo "URI ldap:// ldapi://" >> ${prefix}/etc/ldap/ldap.conf
    echo "TLS_CACERT /etc/ssl/slapd/cacert.pem" >> ${prefix}/etc/ldap/ldap.conf
    echo "TLS_REQCERT ALLOW" >> ${prefix}/etc/ldap/ldap.conf
    cp -pr ${prefix}/etc/ssl /sNow/snow-configspace/system_files/etc/

    # Setup ldapscripts
    if [[ -e /sNow/snow-configspace/system_files/etc/ldapscripts ]]; then 
        cp -pr /sNow/snow-configspace/system_files/etc/ldapscripts/* ${prefix}/etc/ldapscripts/
    else
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^#SERVER" "SERVER=\"ldap://localhost\""
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^#SUFFIX" "SUFFIX=\"$LDAP_BASE\""
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^#GSUFFIX" "GSUFFIX=\"ou=Group\""
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^#USUFFIX" "USUFFIX=\"ou=People\""
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^BINDDN" "BINDDN=\"cn=admin,$LDAP_BASE\""
        replace_text ${prefix}/etc/ldapscripts/ldapscripts.conf "^#LDAPBINOPTS=\"-ZZ\"" "LDAPBINOPTS=\"-ZZ\""
        echo -n "${LDAP_ADMIN_PASSWORD}" > ${prefix}/etc/ldapscripts/ldapscripts.passwd
        chmod 400 ${prefix}/etc/ldapscripts/ldapscripts.passwd
        cp -pr ${prefix}/etc/ldapscripts /sNow/snow-configspace/system_files/etc/
    fi
fi
