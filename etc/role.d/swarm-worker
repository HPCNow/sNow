#!/bin/bash
#
# This file contains recipes to deploy domains using sNow! CLI
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs and setup Docker Swarm to accommodate docker based services.

prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e ${SNOW_ETC}/snow.conf ]]; then
    declare -A CLUSTERS
    source ${SNOW_ETC}/snow.conf
else
    error_msg  "The ${SNOW_ETC}/snow.conf is not available."
    error_exit "Please use the ${SNOW_ETC}/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f ${SNOW_ROOT}/share/common.sh ]]; then
    source ${SNOW_ROOT}/share/common.sh
    get_os_distro
    architecture_identification
fi

# Setup Swarm Cluster Manager
SNOW_SWARM_MANAGER=$(gawk '{if($2 ~ /swarm-manager/){print $1}}' $SNOW_ROOT/etc/domains.conf)
SNOW_SWARM_MANAGER_IP=$(gawk '{if($2 ~ /swarm-manager/){print $4}}' $SNOW_ROOT/etc/domains.conf)
if  [[ ! -z "$SNOW_SWARM_MANAGER" && ! -z "$SITE_SWARM_MANAGER" ]]; then
    SWARM_MANAGER=$SNOW_SWARM_MANAGER
else
    SWARM_MANAGER="${SITE_SWARM_MANAGER:-$SNOW_SWARM_MANAGER}"
fi

if  [[ ! -z "$SNOW_SWARM_MANAGER_IP" && ! -z "$SITE_SWARM_MANAGER_IP" ]]; then
    SWARM_MANAGER_IP=$SNOW_SWARM_MANAGER_IP
else
    SWARM_MANAGER_IP="${SITE_SWARM_MANAGER_IP:-$SNOW_SWARM_MANAGER_IP}"
fi

if  [[ ! -z "$SWARM_MANAGER" ]]; then
    # Install the required packages
    installDebianPackage ${prefix} apt-transport-https ca-certificates curl gnupg2 software-properties-common
    curl -fsSL https://download.docker.com/linux/debian/gpg | chroot ${prefix} /usr/bin/apt-key add -
    distribution_codename=$(chroot ${prefix} /usr/bin/lsb_release -cs)
    chroot ${prefix} /usr/bin/add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian ${distribution_codename} stable"
    chroot ${prefix} /usr/bin/apt-get -y update
    chroot ${prefix} /usr/bin/apt-get -y install "docker-ce=${DOCKER_VERSION}~ce-0~debian"
    #chroot ${prefix} /usr/sbin/usermod -aG docker $sNow_USER
    chroot ${prefix} /bin/systemctl enable docker
    cp -p $SNOW_ROOT/etc/role.d/first_boot/deploy_swarm.sh ${prefix}/usr/local/first_boot/01-deploy_swarm.sh
    sed -i "s|__SWARM_ROLE__|worker|g" ${prefix}/usr/local/first_boot/01-deploy_swarm.sh
    sed -i "s|__SWARM_MANAGER_IP__|${SWARM_MANAGER_IP}|g" ${prefix}/usr/local/first_boot/01-deploy_swarm.sh
    sed -i "s|__SNOW_SERVER__|${SNOW_NODES[0]}|g" ${prefix}/usr/local/first_boot/01-deploy_swarm.sh
    sed -i "s|__SWARM_TOKEN_PATH__|${SNOW_SRV}/deploy_files/etc/docker_swarm.token}|g" ${prefix}/usr/local/first_boot/01-deploy_swarm.sh
    # Check if the token file already exists
    if [[ -e ${SNOW_SRV}/deploy_files/etc/docker_swarm.token ]]; then
        # Transfer the existing file to the final destination
        cp -p ${SNOW_SRV}/deploy_files/etc/docker_swarm.token ${prefix}/root/docker_swarm.token
    else
        check_host_status ${SWARM_MANAGER}
        scp -p ${SWARM_MANAGER}:/root/docker_swarm.token ${SNOW_SRV}/deploy_files/etc/docker_swarm.token
        cp -p ${SNOW_SRV}/deploy_files/etc/docker_swarm.token ${prefix}/root/docker_swarm.token
        if [[ -e ${SNOW_SRV}/deploy_files/etc/docker_swarm.token ]]; then
            error_msg "Docker Swarm Worker requires the file ${SNOW_SRV}/deploy_files/etc/docker_swarm.token"
            error_msg "Which is generated once the Docker Swarm manager is booted for first time"
        fi
    fi
else
    error_msg "Docker Swarm Worker requires a manager already deployed and running"
fi
