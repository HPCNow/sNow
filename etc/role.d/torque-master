#!/bin/bash
#
# This file contains recipes to deploy domains using sNow! CLI
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#SHORT_DESCRIPTION: Installs Torque and Maui. It also generates the install packages for the compute nodes.

prefix=$1

#  Source our common functions - this will let us install a Debian package.
if [[ -e /usr/share/xen-tools/common.sh ]]; then
    source /usr/share/xen-tools/common.sh
else
    echo "Installation problem"
fi
# Load sNow! configuration
if [[ -e ${SNOW_ETC}/snow.conf ]]; then
    declare -A CLUSTERS
    source ${SNOW_ETC}/snow.conf
else
    error_msg  "The ${SNOW_ETC}/snow.conf is not available."
    error_exit "Please use the ${SNOW_ETC}/snow.conf-example to setup your environment."
fi
# Load sNow! functions
if [[ -f ${SNOW_LIB}/common.sh ]]; then
    source ${SNOW_LIB}/common.sh
    get_os_distro
    architecture_identification
fi

SNOW_TORQUE_MASTER=$(gawk '{if($2 ~ /torque-master/){print $1}}' $SNOW_ROOT/etc/domains.conf)
SNOW_TORQUE_MASTER_IP=$(gawk '{if($2 ~ /torque-master/){print $4}}' $SNOW_ROOT/etc/domains.conf)
MAUI_VERSION=${MAUI_VERSION:-master}
torque_major_release=$(echo ${TORQUE_VERSION} | cut -d. -f1)
#maui_major_release=$(echo ${MAUI_VERSION} | cut -d. -f1)
if  [[ ! -z "$SNOW_TORQUE_MASTER" && ! -z "$SITE_TORQUE_MASTER" ]]; then 
    TORQUE_MASTER=$SNOW_TORQUE_MASTER
else
    TORQUE_MASTER="${SITE_TORQUE_MASTER:-$SNOW_TORQUE_MASTER}"
fi

# Build and install Torque
if  [[ ! -z "$TORQUE_MASTER" ]]; then 
    # Install the required packages
    installDebianPackage ${prefix} libtool libssl-dev libxml2-dev libboost-dev ca-certificates automake pkg-config hwloc libhwloc-dev libpam0g-dev cgroup-tools
    # Compile torque and create the packages to be distributed to other Torque master nodes and clients
    if [[ "$torque_major_release" > "5" ]]; then
        torque_config_opts="--enable-cgroups"
    fi
    #if [[ "$torque_major_release" == "5" ]]; then
    #    torque_config_opts="--disable-cpuset"
    #fi
    cat << EOF | chroot ${prefix}
        git clone http://github.com/adaptivecomputing/torque -b ${TORQUE_VERSION} /root/torque/${TORQUE_VERSION}
        cd /root/torque/${TORQUE_VERSION}
        ./autogen.sh
        ./configure --prefix=/usr --with-pam --enable-acct-x ${torque_config_opts}
        make -j 2
        make install
        ldconfig
        make packages
        #rm /etc/init.d/trqauthd /etc/init.d/pbs_server /etc/init.d/pbs_mom
        sed -i "s|^pbs_server|pbs_server -f|g" torque.setup
EOF
    # Transfer packages to the shared file system
    mkdir -p /sNow/OS/Linux/x86_64/torque/${TORQUE_VERSION}
    cp -p ${prefix}/root/torque/${TORQUE_VERSION}/torque-package-* /sNow/OS/Linux/x86_64/torque/${TORQUE_VERSION}/
    cp -pr ${prefix}/root/torque/${TORQUE_VERSION}/contrib /sNow/OS/Linux/x86_64/torque/${TORQUE_VERSION}/
    cp -p $SNOW_ROOT/etc/role.d/first_boot/torque_create_cluster.sh ${prefix}/usr/local/first_boot/01-torque_create_cluster.sh
    sed -i "s|__TORQUE_VERSION__|$TORQUE_VERSION|g" ${prefix}/usr/local/first_boot/01-torque_create_cluster.sh
    # Check if Torque configuration file already exists
    if [[ -e $SNOW_SRV/deploy_files/etc/torque/torque.conf ]]; then 
        # Transfer the existing configuration file to the final destination
        cp -p $SNOW_SRV/deploy_files/etc/torque/torque.conf ${prefix}/etc/torque/torque.conf
        warning_msg "It's a good practice to run a backup of the configuration."
        warning_msg "Consider to include the following command in your crontab:"
        warning_msg "ssh ${TORQUE_MASTER} /usr/local/bin/qmgr -c 'p s' > $SNOW_SRV/deploy_files/etc/torque/torque.conf"
    fi
    # Build and install Maui scheduler
    # Maui is not compatible with Torque > 5.
    if [[ "$torque_major_release" > "5" ]]; then
        warning_msg "Maui is not compatible with Torque > 5 and it's not going to be installed"
    else
        cat << EOF | chroot ${prefix}
            git clone https://github.com/jbarber/maui -b ${MAUI_VERSION} /root/maui/${MAUI_VERSION}
            cd /root/maui/${MAUI_VERSION}
            ./configure --with-pbs
            make -j 2
            make install
            echo '/usr/local/maui/lib/' > /etc/ld.so.conf.d/maui.conf
            echo 'PATH=/usr/local/maui/bin:/usr/local/maui/sbin:$PATH' > /etc/profile.d/maui.sh
EOF
        mkdir -p /usr/lib/systemd/system
        cp -p $SNOW_ROOT/etc/config_template.d/maui/maui.service ${prefix}/usr/lib/systemd/system/maui.service
        chroot ${prefix} /bin/systemctl enable maui.service
        if [[ -e $SNOW_SRV/deploy_files/etc/maui/maui.cfg ]]; then 
            cp -p $SNOW_SRV/deploy_files/etc/maui/maui.cfg ${prefix}/usr/local/maui/maui.cfg
        else
            replace_text ${prefix}/usr/local/maui/maui.cfg "^SERVERHOST" "SERVERHOST            ${TORQUE_MASTER}"
            mkdir -p $SNOW_SRV/deploy_files/etc/maui
            cp -p ${prefix}/usr/local/maui/maui.cfg $SNOW_SRV/deploy_files/etc/maui/
        fi
    fi
fi
