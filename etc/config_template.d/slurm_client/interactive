#!/bin/bash

# Copyright (C) 2013 Alan Orth
# Modified by Jordi Blasco <jordi.blasco@hpcnow.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# interactive: Obtain interactive shell with slurm allocation
#
# Basically simulates:
#
#    salloc -n1 srun --x11 --pty bash

source /sNow/snow-tools/etc/slurm.env
if [[ -e $HOME/.slurm.env ]]; then
    source $HOME/.slurm.env
fi

# The srun options have been defined in the slurm.conf with :
# SallocDefaultCommand="srun -n1 -N1 --mem-per-cpu=0 --pty --preserve-env --mpi=none $SHELL"
#DEF_RUNEXEC=

######
 
function help() 
{
    echo -e "Usage: `basename $0` [-A] [-a] [-c] [-m] [-J] [-e]\n"
    echo "Optional arguments:"
    echo -e "\t -A: account (non-default account)"
    echo -e "\t -p: partition (default: $DEF_PARTITION)"
    echo -e "\t -a: architecture (default: $DEF_ARCH, values hsw=Haswell skl=SkyLake wsw=Warsaw)"
    echo -e "\t -n: number of tasks (default: $DEF_NUM_TASKS)"
    echo -e "\t -c: number of CPU cores (default: $DEF_NUM_CPUS)"
    echo -e "\t -m: amount of memory (GB) per core (default: $DEF_MEM_PER_CPU [GB])"
    echo -e "\t -e: email address to which the begin session notification is to be sent"
    echo -e "\t -r: specify a reservation name"
    echo -e "\t -g: specify a GRES (i.e. gpu)"
    echo -e "\t -w: target node"
    echo -e "\t -J: job name"
    echo -e "\t -x: binary that you want to run interactively"
    echo -e "example : `basename $0` -A snow -a hsw -c 4 -J MyFirstInteractiveJob"
    echo -e "example : `basename $0` -A snow -a hsw -c 4 -J MyFirstInteractiveJob -x \"MyBinary MyOptions\""

    echo -e "\nWritten by: Alan Orth <a.orth@cgiar.org>"
    echo -e "Modified by: Jordi Blasco <jordi.blasco@hpcnow.com>"

    exit 0
}

function check_partitions()
{
    local avail_partitions=$(scontrol show partitions | grep PartitionName | cut -d= -f2)
    local requested_partition=$1
    local valid_partition=0
    for partition in ${avail_partitions}; do
        if [[ "${requested_partition}" == "$partition" ]]; then
            valid_partition=1
        fi
    done
    if [[ "${valid_partition}" != "1" ]]; then
        echo "The requested partition is not valid. Available options : ${avail_partitions}"
        exit 0
    fi
}

function parse_options() 
{
    while getopts ":A:p:a:n:c:m:e:r:g:w:J:x:" opt; do
        case $opt in
            a)
                ARCH=$OPTARG
               ;; 
            p)
                # make sure -p is passed a valid partition
                check_partitions
                PARTITION=$OPTARG
               ;; 
            n)
                # make sure -n is passed a valid integer
                if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                    help
                fi
                NUM_TASKS=$OPTARG
                ;;
            c)
                # make sure -c is passed a valid integer
                if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                    help
                fi
                NUM_CPUS=$OPTARG
                ;;
            m)
                # make sure -m is passed a valid integer
                if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                    help
                fi

                MEM_PER_CPU=$OPTARG
                ;;
            p)
                PARTITION=$OPTARG
                ;;
            e) 
                EMAIL_NOTIFY=$OPTARG
                ;;
            J)
                JOB_NAME=$OPTARG
                ;;
            A)
                ACCOUNT=$OPTARG
                ;;
            x)
                RUNEXEC=$OPTARG
                ;;
            r)
                RES=$OPTARG
                ;;
            w)
                NODELIST=$OPTARG
                ;;
            g)
                GRES=$OPTARG
                ;;

            \?|:)
                help
                ;;
        esac
    done
}

function envsetup() 
{
    SALLOC_BIN=/usr/bin/salloc

    # default is to request 1 CPU, unless more are requested
    if [[ $NUM_TASKS -gt $DEF_NUM_TASKS ]]; then
        SALLOC_OPTS="-n $NUM_TASKS"
    else
        SALLOC_OPTS="-n $DEF_NUM_TASKS"
    fi

    # default is to request 1 CPU, unless more are requested
    if [[ $NUM_CPUS -gt $DEF_NUM_CPUS ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -c $NUM_CPUS"
    else
        SALLOC_OPTS="$SALLOC_OPTS -c $DEF_NUM_CPUS"
    fi

    # default is to request 1GB of Memory / CPU, unless more are requested
    if [[ $MEM_PER_CPU -gt $DEF_MEM_PER_CPU ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --mem-per-cpu=$(($MEM_PER_CPU*1024))"
    else
        SALLOC_OPTS="$SALLOC_OPTS --mem-per-cpu=$(($DEF_MEM_PER_CPU*1024))"
    fi

    # check for a job name
    if [[ -n "$JOB_NAME" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -J $JOB_NAME"
    else
        SALLOC_OPTS="$SALLOC_OPTS -J $DEF_JOB_NAME"
    fi

    if [[ -n "$EMAIL_NOTIFY" ]]; then
         SALLOC_OPTS="$SALLOC_OPTS --mail-type=BEGIN --mail-user=$EMAIL_NOTIFY"
    fi

    if [[ -n "$ACCOUNT" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -A $ACCOUNT"
    fi 

    # add the partition 
    if [[ -n "$PARTITION" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -p $PARTITION"
    else
        if [[ -n "$DEF_PARTITION" ]]; then
            SALLOC_OPTS="$SALLOC_OPTS -p $DEF_PARTITION"
        fi
    fi

    # add the architecture as a feature
    if [[ -n "$ARCH" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -C $ARCH"
    else
        if [[ -n "$DEF_ARCH" ]]; then
            SALLOC_OPTS="$SALLOC_OPTS -C $DEF_ARCH"
        fi
    fi

    # add the default time limit
    if [[ -n "$TIME" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS -t $TIME"
    else
        SALLOC_OPTS="$SALLOC_OPTS -t $DEF_TIME"
    fi

    # check for executable
    if [[ -n "$RUNEXEC" ]]; then
        SRUN_OPTS=$RUNEXEC
        unset INTERACTIVE_SHELL
        unset INTERACTIVE_SHELL_OPTS 
    fi

    # Check for a reservation name
    if [[ -n "$RES" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --reservation=$RES"
    fi

    # Check for a node name
    if [[ -n "$NODELIST" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --nodelist=$NODELIST"
    fi

    # Check for a GRES requirement
    if [[ -n "$GRES" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --gres=$GRES"
    fi

}

# pass the shell's argument array to the parsing function
parse_options "$@"

# Don't propogate microarchitecture of login node.
if [[ -z "$MODULE_LOAD_ALLOWED" ]]; then
    unset MODULEPATH MODULEPATH_ROOT module ml LMOD_CMD LMOD_SPIDER_CACHE_DIRS BASH_ENV
fi

# setup the defaults
envsetup

$SALLOC_BIN $SALLOC_OPTS $SRUN_BIN $SRUN_OPTS $INTERACTIVE_SHELL $INTERACTIVE_SHELL_OPTS
