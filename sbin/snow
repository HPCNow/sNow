#!/bin/bash
# This is the sNow! Command Line Interface 
# Copyright (C) 2008 Jordi Blasco
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# sNow! Cluster Suite is an opensource project developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website: www.hpcnow.com/snow
#
#set -xv
set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
readonly PROGNAME=$(basename "$0")
readonly SNOW_VERSION="1.1.13"
trap "error_exit 'Received signal SIGHUP'" SIGHUP
trap "error_exit 'Received signal SIGINT'" SIGINT
trap "error_exit 'Received signal SIGTERM'" SIGTERM
# User privileges
if [[ $(id -u) -ne 0 ]] ; then
    error_exit "sNow! Tools CLI must be run as root. Use: 'sudo su -' or prepend your command with sudo: 'sudo snow <options>'."
fi
#Logging
#readonly LOGFILE=/sNow/log/snow.log
readonly RETAIN_NUM_LINES=10
# Load the configuration
SNOW_PATH=/sNow
SNOW_HOME=${SNOW_PATH}/home
SNOW_SOFT=${SNOW_PATH}/easybuild
SNOW_CONF=${SNOW_PATH}/snow-configspace
SNOW_TOOL=${SNOW_PATH}/snow-tools
SNOW_LOG=${SNOW_PATH}/log
readonly CONFIG_FILE=${SNOW_TOOL}/etc/snow.conf
readonly ENTERPRISE_EXTENSIONS=${SNOW_TOOL}/share/enterprise_extensions.sh
readonly SNOW_DOMAINS=${SNOW_TOOL}/etc/domains.conf
readonly SNOW_ACTIVE_DOMAINS=${SNOW_TOOL}/etc/active-domains.conf
readonly opt1=$1
readonly opt2=$2
readonly opt3=$3
readonly opt4=$4
readonly opt5=$5
readonly opt6=$6
readonly opt7=$7
declare -A CLUSTERS
PDSH_RCMD_TYPE=ssh
HAS_EE=false

if [[ -f ${CONFIG_FILE} ]]; then
    source ${CONFIG_FILE}
    export PDSH_RCMD_TYPE
else
    echo "[E] ${CONFIG_FILE} must be configured before to use snow command."
    exit 1
fi

if [[ -f ${SNOW_TOOL}/share/common.sh ]]; then
    source ${SNOW_TOOL}/share/common.sh
    logsetup
    get_os_distro
    architecture_identification
fi

if [[ -f ${SNOW_DOMAINS} ]]; then
    readonly SELF_ACTIVE_DOMAINS=$(cat ${SNOW_DOMAINS} | grep -v ^# | gawk '{if($2 !~ /^snow$/){print $1}}')
fi

if [[ -f ${ENTERPRISE_EXTENSIONS} ]]; then
    source ${ENTERPRISE_EXTENSIONS}
    HAS_EE=true
fi

if ! [[ -d ${SNOW_LOG} ]]; then
    mkdir -p ${SNOW_LOG}
fi

if [ ! -e ${SNOW_LOG}/snow_actions.log ]; then
    touch ${SNOW_LOG}/snow_actions.log
    chown root:root ${SNOW_LOG}/snow_actions.log
    chmod 600 ${SNOW_LOG}/snow_actions.log
fi

#
# Start Cases
#
case $opt1 in
    init)
        init
        ;;
    config)
        config
        ;;
    update)
        case $opt2 in
            firewall)
                update_firewall
                ;;
            tools)
                update_tools
                ;;
            configspace)
                update_configspace
                ;;
            template)
                update_xen_image && error_check 0 "sNow! image updated " || error_check 1 "sNow! image updated " &
                spinner $!             "Updating sNow! image "
                ;;
            *)
                error_msg "Update available options: firewall, tools, configspace, template"
                ;;
        esac
        ;;
    remove)
        case $opt2 in
            domain)
                remove_domain_xen $opt3
                ;;
            node|nodes)
                remove_node $opt3
                ;;
            template)
                remove_template $opt3
                ;;
            image)
                remove_image $opt3
                ;;
            *)
                error_msg "You can remove: domain, node, template, image"
                ;;
        esac
        ;;
    deploy)
        deploy $opt2 $opt3 $opt4 $opt5 & #&& error_check 0 "System deployed " || error_check 1 "System deployed " &
        spinner $!             "Deploying $opt2"
        ;;
    clone)
        case $opt2 in
            #domain)
            #    clone_domain_xen $opt3 $opt4 $opt5 $opt6 && error_check 0 "System cloned " || error_check 1 "System cloned " &
            #    spinner $!             "Cloning $opt3"
            #    ;;
            node)
                clone_node $opt3 $opt4 $opt5 "$opt6" "$opt7" && error_check 0 "System cloned " || error_check 1 "System cloned " &
                spinner $!             "Cloning $opt3"
                ;;
            template)
                clone_template $opt3 $opt4 "$opt5"
                ;;
            image)
                clone_image $opt3 $opt4 $opt5
                ;;
            *)
                error_msg "You can clone: node, template or image"
                ;;
        esac
        ;;
    add)
        case $opt2 in
            domain)
                add_domain_xen $opt3
                ;;
            node|nodes)
                shift 3
                add_node $opt3 "$@"
                ;;
            template)
                add_template $opt3
                ;;
            image)
                add_image $opt3
                ;;
            *)
                error_msg "You can add: domain, node, template, image"
                ;;
        esac
        ;;
    set)
        case $opt2 in
            #domain)
            #    set_domain_xen $opt3
            #    ;;
            node|nodes)
                shift 3
                set_node $opt3 "$@"
                ;;
            #template)
            #    set_template $opt3
            #    ;;
            #image)
            #    set_image $opt3
            #    ;;
            *)
                error_msg "You can set: domain, node, template, image"
                ;;
        esac
        ;;
    list)
        case $opt2 in
            role|roles)
                avail_roles "$opt3"
                ;;
            domain|domains)
                avail_domains "$opt3"
                ;;
            template|templates)
                avail_templates "$opt3"
                ;;
            image|images)
                avail_images "$opt3"
                ;;
            node|nodes)
                avail_nodes "$opt3"
                ;;
            *)
                error_msg "You can list: domains, templates, images, nodes, roles"
                ;;
        esac
        ;;
    show)
        case $opt2 in
            #domains)
            #    avail_domains "$opt3"
            #    ;;
            #templates)
            #    avail_templates "$opt3"
            #    ;;
            #images)
            #    avail_images "$opt3"
            #    ;;
            node|nodes)
                show_nodes "$opt3"
                ;;
            *)
                #error_msg "You can list: domains, templates, images, nodes"
                error_msg "You can show: nodes"
                ;;
        esac
        ;;
    chroot)
        chroot_image $opt2
        ;;
    takeover)
        takeover $opt2
        ;;
    boot)
        case $opt2 in
            domains)  
                boot_domains $opt3 && error_check 0 "Domains are UP " || error_check 1 "Domains are UP " &
                spinner $!             'Booting domains'
                ;;
            cluster)
                boot_cluster $opt3 $opt4 $opt5 && error_check 0 "Cluster booted " || error_check 1 "Cluster booted " &
                spinner $!             "Booting cluster "
                ;;
            *)
                boot $opt2 $opt3 $opt4 && error_check 0 "Node(s) booted " || error_check 1 "Node(s) booted " &
                spinner $!             "Booting node(s) "
                ;;
        esac
        ;;
    reboot)
        nreboot $opt2
        ;;
    reset)
        case $opt2 in
            domains)  
                nreset_domains 
                ;;
            *)
                nreset $opt2
                ;;
        esac
        ;;
    poweroff)
        case $opt2 in
            domains)  
                poweroff_domains 
                ;;
            *)
                npoweroff $opt2
                ;;
        esac
        ;;
    shutdown)
        case $opt2 in
            domains)  
                shutdown_domains && error_check 0 "Domains are down " || error_check 1 "Some domains are not responsive " &
                spinner $!             'Shutting down domains'
                ;;
            cluster)
                shutdown_cluster $opt3 
                ;;
            *)
                nshutdown $opt2 
                ;;
        esac
        ;;
    destroy)
        case $opt2 in
            domains)  
                destroy_domains && error_check 0 "Domains are down " || error_check 1 "Some domains were already down " &
                spinner $!             'Stopping domains'
                ;;
            cluster)
                destroy_cluster $opt3 
                ;;
            *)
                ndestroy $opt2 
                ;;
        esac
        ;;
    console)
        nconsole $opt2
        ;;
    cmd)
        shift 2
        ncmd $opt2 "$@"
        ;;
    version|-V|-version|--version)
        msg "sNow! version: ${SNOW_VERSION}"
        ;;
    help|-help|--help|\?|*)
        shelp
        ;;
  esac

#
# End Cases
#

#
# Log the sNow! activity
#

echo "$(date)  $SUDO_USER as $USER    $@" >> ${SNOW_LOG}/snow_actions.log
