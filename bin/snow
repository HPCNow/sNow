#!/bin/bash

# This is the sNow! Command Line Interface 
# Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website : www.hpcnow.com/snow
#

SNOWPATH=$(dirname "$0")
# Load the configuration
CONFIG_FILE=$SNOWPATH/../etc/snow/snow.conf
opt1=$1
opt2=$3
opt3=$3

if [[ -f $CONFIG_FILE ]]; then
    source $CONFIG_FILE
fi

if [[ -d $SNOWROOT/log ]]; then
    mkdir $SNOWROOT/log
fi



function shelp(){
echo " 

This is the sNow! Command Line Interface
Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
For more information, visit the official website : www.hpcnow.com/snow

Usage: snow [function] <option|module|server>

Function List:

    * config                       | to update the sNow! configuration based on the snow.conf, /etc/hosts and active-modules.conf
    * update tools                 | to update the sNow! Tools from the public HPCNow! GIT repo
    * install base                 | to install the basic software to deploy VMs, cluster filesystem nodes and compute nodes
    * install <module|server>      |
    * update <module|server>       |
    * update configspace           |
    * list                         |
    * takeover                     |
    * boot <module|server>         |
    * boot services                |
    * boot cluster <clustername>   |
    * reboot <module|server>       |
    * shutdown <module|server>     |
    * destroy <module|server>      |
    * console <module|server>      |
    * uptime <module|sever>        |

Examples:

    snow update tools
    snow install base
    snow install ldap
"
}

function check_interfaces() {
#ip show ${BRIDGEMAP[xpub0]}
}

function config() {
#check_interfaces
if ! [[ -f $SNOWROOT/snow-tools/etc/snow/active-modules.conf ]]; then
    echo "No $SNOWROOT/snow-tools/etc/snow/active-modules.conf found"
else
    #fai         none  7,3
    cat $SNOWROOT/snow-tools/etc/snow/active-modules.conf | grep -v ^# |  gawk '{print $1" "}'
fi
}

function update_tools() {
if ! [[ -d $SNOWROOT/snow-tools ]]; then
    mkdir -p $SNOWROOT
    cd $SNOWROOT
    git clone http://bitbucket.org/hpcnow/snow-tools.git
    cd -
else
    cd $SNOWROOT/snow-tools
    git pull http://bitbucket.org/hpcnow/snow-tools.git
fi 
}

function update_configspace() {
if ! [[ -d $SNOWROOT/snow-configspace  ]]; then
    mkdir -p $SNOWROOT
    cd $SNOWROOT
    git clone http://bitbucket.org/hpcnow/snow-configspace.git
    cd -
else
    cd $SNOWROOT/snow-configspace
    git pull http://bitbucket.org/hpcnow/snow-configspace.git
fi
}

function install_base() {
    if ( $opt3 = force )
    then 
        FORCE="--force"
    fi 
    xen-create-image --hostname=fai --ip=${ip[fai]} --gateway=${gw[fai]} --netmask=${nm[fai]} \
                     --role=udev,snow,fai  --accounts --copyhosts --genpass=0 $FORCE
}

function install() {
    echo install
}

function update() {
    echo update
}

function list() {
    echo list
}

function takeover() {
    echo takeover
}

function boot() {
    echo boot
}

function get_server_distribution(){
    echo get_server_distro
}

function boot_services() {
    get_server_distribution
    for i in $(SELF_ACTIVE_MODULES)
    do 
        ssh server[$i] xm create $SNOWROOT/etc/xen/$i.cfg
    done
}

function boot_cluster() {
    CLUSTERNAME=$2
    echo boot_cluster 
}

function nreboot() {
    pdsh -w $2 reboot
}

function nshutdown() {
    ssh $2 halt
}

function ndestroy() {
    get_server_distribution
    if vm ; then 
        xm destroy $2
    else
        ipmitool -H $2 -U $IPMIUSER -P $PIMIPWD power down
    fi
}

function nconsole() {
    get_server_distribution
    if vm ; then
        xm console $2
    else
        ipmitool -H $2 -U $IPMIUSER -P $PIMIPWD console activate
    fi
}

function nuptime() {
    pdsh -w $2 uptime 
}

#
# End Functions
#

#
# Start Cases
#
case $opt1 in
    update)
        case $opt2 in
            tools)
                update_tools
            ;;
            configspace)
                update_configspace
            ;;
            *)
                update $opt3
            ;;
        esac
    ;;
    install)
        case $opt2 in
            base)
                install_base
            ;;
            *)
                install $opt3
            ;;
        esac
    ;;
    list)
        list $opt2
    ;;
    takeover)
        takeover $opt2
    ;;
    boot)
        case $opt2 in
            services)  
                boot_services $opt3 
            ;;
            cluster)
                boot_cluster $opt3 
            ;;
            *)
                boot $opt3 
            ;;
        esac
    ;;
    reboot)
        nreboot $opt2
    ;;
    shutdown)
        nshutdown $opt2
    ;;
    destroy)
        ndestroy $opt2
    ;;
    console)
        nconsole $opt2
    ;;
    uptime)
        nuptime $opt2
    ;;
    help|\?)
      shelp
      ;;
  esac

#
# End Cases
#

#
# Log the sNow! activity
#

#echo "$(date)    $USER    $@" >> $SNOWROOT/log/snow_actions.log 
