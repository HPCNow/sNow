#!/bin/bash
# This is the sNow! Command Line Interface 
# Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
# For more information, visit the official website : www.hpcnow.com/snow
#
#set -xv
SNOWPATH=$(dirname "$0")
PROGNAME=$(basename "$0")
# Load the configuration
CONFIG_FILE=$SNOWPATH/../etc/snow.conf
ENTERPRISE_EXTENSIONS=$SNOWPATH/enterprise_extensions.sh
SNOW_DOMAINS=$SNOWPATH/../etc/domains.conf
SELF_ACTIVE_DOMAINS=$(cat $SNOW_DOMAINS | grep -v ^# | gawk '{print $1}' || echo "no gawk")
HAS_EE=false
DOWNLD=wget
opt1=$1
opt2=$2
opt3=$3
opt4=$4
opt5=$5

if [[ -f $CONFIG_FILE ]]; then
    source $CONFIG_FILE
    export PDSH_RCMD_TYPE
fi

if [[ -f $ENTERPRISE_EXTENSIONS ]]; then
    source $ENTERPRISE_EXTENSIONS
    HAS_EE=true
fi

if ! [[ -d $SNOWROOT/log ]]; then
    mkdir $SNOWROOT/log
fi

function error_exit(){
    echo "${PROGNAME}: ${1:-"Unknown Error: Please report the issue to https://bitbucket.org/hpcnow/snow-tools/issues"}" 1>&2
    exit 1
}

function shelp(){
echo " 
This is the sNow! Command Line Interface
Developed by Jordi Blasco <jordi.blasco@hpcnow.com>
For more information, visit the official website : www.hpcnow.com

Usage: snow [function] <option|domain|server>

Function List:

    * config                         | updates the sNow! configuration based on the changes applied in snow.conf and domains.conf
    * update tools                   | updates the sNow! Tools 
    * update configspace             | updates configuration files from private git 
    * update snow_template           | updates the sNow! image used to create new domains
    * deploy <domain|server>         | deploy specific domain/server 
    * list                           | list current domains (services) and their status
    * takeover                       | migrates domains and critical services to other sNow nodes (only available in sNow! Enterprise Edition)
    * boot <domain|server>           | boot specific domain or server
    * boot domains                   | boot all the domains (all services not available under sNow! HA)
    * boot cluster <clustername>     | boot all the compute nodes of the selected cluster (by default 20 nodes at once)
    * reboot <domain|server>         | reboot specific domain or server
    * shutdown <domain|server>       | shutdown specific domain or server
    * shutdown cluster <clustername> | shutdown all the compute nodes of the selected cluster
    * destroy <domain|server>        | force to stop specific domain or server
    * console <domain|server>        | console access to specific domain or server
    * uptime <domain|sever>          | shows uptime of specific domain or server
    * cmd <domain|sever> <command>   | executes a command in the domain(s) or server(s)

Examples:

    snow update tools
    snow deploy ldap01
    snow cmd n[001-999] uname
"
}

function config() {
if ! [[ -f $SNOW_DOMAINS ]]; then
    echo "No $SNOW_DOMAINS found"
else
    cat $SNOWROOT/snow-tools/etc/snow.conf
    echo "==== Active Domains ===="
    cat $SNOWROOT/snow-tools/etc/active-domains.conf | grep -v ^# |  gawk '{print $0}'
fi
}

if [ ! $HAS_EE ]; then
    function takeover() {
        echo "The takeover feature is only available in sNow! Enterprise Edition"
    }
fi

function update_tools() {
if ! [[ -d $SNOWROOT/snow-tools ]]; then
    mkdir -p $SNOWROOT
    cd $SNOWROOT
    git clone http://bitbucket.org/hpcnow/snow-tools.git || error_exit "ERROR: please review the SSH certificates in your bitbucket."
    cd -
else
    cd $SNOWROOT/snow-tools
    git pull http://bitbucket.org/hpcnow/snow-tools.git || error_exit "ERROR: please review the SSH certificates in your bitbucket."
fi 
}

function update_configspace() {
if ! [[ -d $SNOWROOT/snow-configspace  ]]; then
    mkdir -p $SNOWROOT
    cd $SNOWROOT
    git clone http://bitbucket.org/hpcnow/snow-configspace.git || error_exit "ERROR: please review the SSH certificates in your bitbucket."
    cd -
else
    cd $SNOWROOT/snow-configspace
    git pull https://$TOKEN:x-oauth-basic@$PRIVATE_REPO || error_exit "ERROR: please review the SSH certificates in your bitbucket."
fi
}

function update_xen_image() {
if [[ ! -d $SNOWROOT/domains/template ]]; then
    mkdir -p $SNOWROOT/domains/template
    wget http://repo.hpcnow.com/snow-template.md5sum -P $SNOWROOT/domains/template || error_exit "ERROR: the image can not be downloaded. Please check your network setup."
    wget http://repo.hpcnow.com/snow-template.tar.bz2 -P $SNOWROOT/domains/template || error_exit "ERROR: the image can not be downloaded. Please check your network setup."
else
    if [[ -f $SNOWROOT/domains/template/snow-template.tar.bz2 ]]; then
        MD5LOCAL=$(md5sum $SNOWROOT/domains/template/snow-template.tar.bz2 | gawk '{ print $1 }')
        wget http://repo.hpcnow.com/snow-template.md5sum -P $SNOWROOT/domains/template || error_exit "ERROR: the image can not be downloaded. Please check your network setup."
        MD5HPCNOW=$(cat $SNOWROOT/domains/template/snow-template.md5sum | gawk '{ print $1 }')
        if [[ "$MD5LOCAL" != "$MD5HPCNOW" ]]; then
            echo "Downloading most recent sNow! domain template"
            wget http://repo.hpcnow.com/snow-template.tar.bz2 -P $SNOWROOT/domains/template || error_exit "ERROR: the image can not be downloaded. Please check your network setup."
        else
            echo "sNow domain template is up-to-date."
        fi
    else
        wget http://repo.hpcnow.com/snow-template.tar.bz2 -P $SNOWROOT/domains/template || error_exit "ERROR: the image can not be downloaded. Please check your network setup."
    fi
fi 
}

function xen_create() {
    get_server_distribution $1 
    if [[ -f $SNOWROOT/snow-tools/etc/domains/$1.cfg ]]; then
        if [[ "$opt3" != "force" ]]; then
            echo "The domain $1 already exist, please use force option to overwrite the domain"
            exit 1
        else
            FORCE="--force"
        fi
    else
        IMG_STATUS=$(cat $SNOW_DOMAINS | grep "$opt2")
        if [[ ! $IMG_STATUS ]]; then
            echo "The domain $1 is NOT available in the $SNOW_DOMAINS."
            exit 1
        else
            echo "Deploying the domain $1. It can take few minutes. Please wait!"
        fi
    fi

    if [[ -n "$IMG_DST" ]]; then
        IMG_DST_OPT="--${IMG_DST}"
    fi 
    cat $SNOW_DOMAINS | grep "$opt2" | gawk -v force="$FORCE" -v pwd=$MASTERPWD '{
        hostname=$1; role=$2; dev_nic1=$3; ip_nic1=$4; bridge_nic1=$5; mac_nic1=$6; mask_nic1=$7; gw_nic1=$8; img_dst=$IMG_DST_OPT
        }
        END{
        system("xen-create-image --config=/sNow/snow-tools/etc/xen-tools.conf --roledir=/sNow/snow-tools/etc/role.d --hostname="hostname" --mac="mac_nic1" --bridge="bridge_nic1" --ip="ip_nic1" --gateway="gw_nic1" --netmask="mask_nic1" --role=snow,"role" --copyhosts --password="pwd " "force" "img_dst)
        }' || error_exit "ERROR: unable to install the domain, please report the issue to HPCNow!"
}

function create_base() {
    if [[ "$opt3" == "force" ]]; then
        FORCE="--force"
    fi 
    xen_create deploy
}

function node_rank() {
    if [[ $1 =~ \] ]]; then
        NPREFIX=$(echo $1 | cut -d[ -f1)
        NRANK=($(echo $1 | cut -d[ -f2| cut -d] -f1|  sed -e "s/-/ /"))
        NLENG=$(echo ${NRANK[1]}-${NRANK[0]} | bc -l)
    else 
        NLENG=0
    fi
}

function deploy_copy() {
    for i in $(eval echo "{${NRANK[0]}..${NRANK[1]}}")
    do 
        cp -p $SNOWROOT/OS/deploy/pxelinux.cfg/$1 $SNOWROOT/OS/deploy/pxelinux.cfg/$(gethostip $NPREFIX$i | gawk '{print $3}')
    done
}

function deploy() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain or node to deploy"
        exit 1
    fi
    get_server_distribution $1
    echo "This will install $1. All the data contained in these nodes will be removed"
    read -p "Are you sure? (y/n) : " -n 1 -r
    echo 
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        if (($IS_VM)) ; then
            xen_create $1 $2
        else
            node_rank $1
            #BLOCKN=${2:-$BLOCKN}
            #BLOCKD=${3:-$BLOCKD}
            DEPLOYTMPL=${2:-$DEPLOYTMPL}
            if ! [[ -f $SNOWROOT/OS/deploy/pxelinux.cfg/$DEPLOYTMPL ]] ; then
                echo "No template $DEPLOYTMPL available in $SNOWROOT/OS/deploy/pxelinux.cfg"
                exit 1
            fi
            if (( $NLENG > 0 )); then
                echo "Deploying node range $1 ... This will take a while, Please wait"
                #parallel -j $BLOCKN snow check_host_status "$NPREFIX{}-bmc" ::: $(eval echo "{${NRANK[0]}..${NRANK[1]}}")
                deploy_copy $DEPLOYTMPL
                parallel -j $BLOCKN \
                echo "Deploying node : $NPREFIX{} ... Please wait" \; \
                ipmitool -I $IPMITYPE -H "$NPREFIX{}-bmc" -U $IPMIUSER -P $IPMIPWD power reset \; \
                sleep 5 \; \
                ipmitool -I $IPMITYPE -H "$NPREFIX{}-bmc" -U $IPMIUSER -P $IPMIPWD power on \; \
                sleep $BLOCKD \
                ::: $(eval echo "{${NRANK[0]}..${NRANK[1]}}")
                sleep 180
                echo "Setting up dis as boot device... Please wait"
                deploy_copy $DEFAULTBOOT
            else
                check_host_status $1-bmc
                cp -p $SNOWROOT/OS/deploy/pxelinux.cfg/$DEPLOYTMPL $SNOWROOT/OS/deploy/pxelinux.cfg/$(gethostip $1 | gawk '{print $3}')
                ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD power reset
                sleep 5
                ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD power on
                echo "Deploying node : $1 ... Please wait"
                sleep 180
                cp -p $SNOWROOT/OS/deploy/pxelinux.cfg/$DEFAULTBOOT $SNOWROOT/OS/deploy/pxelinux.cfg/$(gethostip $1 | gawk '{print $3}') 
            fi
        fi
    else
        echo
        echo "Well done. It's better to be sure."
    fi
}


function list() {
    xl list $opt2
}


function check_host_status(){
    PING=$(ping -c 1 $1 &> /dev/null)
    if [[ "$?" != "0" ]]; then
        echo "The host $1 is not responsive. Please check the host name, DNS server or /etc/hosts."
        exit 1
    fi 
}

function boot() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain or node to boot."
        exit 1
    fi
    get_server_distribution $1
    if (($IS_VM)) ; then
        if [[ -f $SNOWROOT/snow-tools/etc/domains/${1}${DOM_EXT}.cfg ]]; then 
            xl create $SNOWROOT/snow-tools/etc/domains/${1}${DOM_EXT}.cfg
        else
            echo "The domain $1 needs to be deployed first: Execute : snow deploy $i"
            exit 1
        fi
    else
        node_rank $1
        BLOCKN=${2:-$BLOCKN}
        BLOCKD=${3:-$BLOCKD}
        if (( $NLENG > 1 )); then
            parallel -j $BLOCKN \
            echo "$NPREFIX{}-bmc" \; \
            sleep $BLOCKD \; \
            ipmitool -I $IPMITYPE -H "$NPREFIX{}-bmc" -U $IPMIUSER -P $IPMIPWD power on \
            ::: $(eval echo "{${NRANK[0]}..${NRANK[1]}}")
        else 
            check_host_status $1-bmc
            ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD power on
        fi
    fi
}

function get_server_distribution(){
    node_rank $1
    if (( $NLENG > 0 )); then
        # VM ranks are not yet supported
        IS_VM=0
    else
        IS_VM=$(cat $SNOW_DOMAINS | gawk -v vm="$1" 'BEGIN{isvm=0}{if (match($1, vm)){isvm=1}}END{print isvm}')
    fi
}

function boot_domains() {
    for i in $(SELF_ACTIVE_DOMAINS)
    do 
        boot $i
    done
}

function boot_cluster() {
    if [ -z "$1" ]; then
        echo "ERROR: No cluster to boot."
        exit 1
    fi
    CLUSTERNAME=$1
    BLOCKN=${2:-$BLOCKN}
    BLOCKD=${3:-$BLOCKD}
    # In order to avoid power consumption peaks, the nodes needs to be booted in a blocks of few nodes with a delayed (5 seconds) timing between blocks 
    # BlockN is the number of nodes to be iniciated at the same time (default should be 5)
    # BlockD is the delay between one block and the following one (default 5 seconds)
    # GNU Parallel : Pass $BLOCKN + Sleep $BLOCKD
    boot ${CLUSTERS[$1]} 
}

function ncmd() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain(s) or node(s) to execute command."
        exit 1
    fi
    pdsh -w $1 $2 $3 $4
}

function nreboot() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain(s) or node(s) to reboot."
        exit 1
    fi
    pdsh -w $1 reboot
}

function nshutdown() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain(s) or node(s) to shutdown."
        exit 1
    fi
    pdsh -w $1 systemctl poweroff
}

function shutdown_cluster() {
    if [ -z "$1" ]; then
        echo "ERROR: No cluster to shutdown."
        exit 1
    fi
    CLUSTERNAME=$1
    nshutdown ${CLUSTERS[$1]} 
}

function ndestroy() {
    if [ -z "$1" ]; then
        echo "ERROR: No domain(s) or node(s) to power down."
        exit 1
    fi
    get_server_distribution $1
    if (($IS_VM)) ; then
        xl destroy $1
    else
        node_rank $1
        BLOCKN=${2:-$BLOCKN}
        BLOCKD=${3:-$BLOCKD}
        if (( $NLENG > 1 )); then
            parallel -j $BLOCKN \
            echo "$NPREFIX{}-bmc" \; \
            ipmitool -I $IPMITYPE -H "$NPREFIX{}-bmc" -U $IPMIUSER -P $IPMIPWD power off \
            ::: $(eval echo "{${NRANK[0]}..${NRANK[1]}}")
        else
            check_host_status $1-bmc
            ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD power off
        fi
    fi
}

function nconsole() {
    if [ -z "$1" ]; then
        echo "ERROR: please specify the domain(s) or node(s) to connect."
        exit 1
    fi
    get_server_distribution $1
    if (($IS_VM)) ; then
        xl console $1
    else
        check_host_status $1-bmc
        ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD sol deactivate
        sleep 1
        ipmitool -I $IPMITYPE -H $1-bmc -U $IPMIUSER -P $IPMIPWD sol activate
    fi
}

function nuptime() {
    if [ -z "$1" ]; then
        echo "ERROR: please, specify the domain(s) or node(s) to check the uptime."
        exit 1
    fi
    pdsh -w $1 uptime 
}

#
# End Functions
#

#
# Start Cases
#
case $opt1 in
    config)
        config
    ;;
    update)
        case $opt2 in
            tools)
                update_tools
            ;;
            configspace)
                update_configspace
            ;;
            snow_template)
                update_xen_image
            ;;
            *)
                echo "Update available options : update_tools, configspace, snow_template"
            ;;
        esac
    ;;
    deploy)
        deploy $opt2 $opt3 $opt4 $opt5
    ;;
    create)
        case $opt2 in
            base)
                create_base
            ;;
            *)
                create $opt2
            ;;
        esac
    ;;
    list)
        list $opt2
    ;;
    takeover)
        takeover $opt2
    ;;
    boot)
        case $opt2 in
            domains)  
                boot_domains $opt3 
            ;;
            cluster)
                boot_cluster $opt3 $opt4 $opt5 
            ;;
            *)
                boot $opt2 $opt3 $opt4
            ;;
        esac
    ;;
    cmd)
        ncmd $opt2 $opt3 $opt4 $opt5
    ;;
    reboot)
        nreboot $opt2
    ;;
    shutdown)
        case $opt2 in
            cluster)
                shutdown_cluster $opt3 
            ;;
            *)
                nshutdown $opt2 
            ;;
        esac
    ;;
    destroy)
        ndestroy $opt2
    ;;
    console)
        nconsole $opt2
    ;;
    uptime)
        nuptime $opt2
    ;;
    help|-help|--help|\?|*)
      shelp
      ;;
  esac

#
# End Cases
#

#
# Log the sNow! activity
#

echo "$(date)    $USER    $@" >> $SNOWROOT/log/snow_actions.log 
